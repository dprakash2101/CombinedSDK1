# coding: utf-8

"""
    Combined API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
from openapi_client.models.day_of_week import DayOfWeek
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DateOnly(BaseModel):
    """
    DateOnly
    """ # noqa: E501
    year: Optional[StrictInt] = None
    month: Optional[StrictInt] = None
    day: Optional[StrictInt] = None
    day_of_week: Optional[DayOfWeek] = Field(default=None, alias="dayOfWeek")
    day_of_year: Optional[StrictInt] = Field(default=None, alias="dayOfYear")
    day_number: Optional[StrictInt] = Field(default=None, alias="dayNumber")
    __properties: ClassVar[List[str]] = ["year", "month", "day", "dayOfWeek", "dayOfYear", "dayNumber"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DateOnly from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "day_of_year",
                "day_number",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DateOnly from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "year": obj.get("year"),
            "month": obj.get("month"),
            "day": obj.get("day"),
            "dayOfWeek": obj.get("dayOfWeek"),
            "dayOfYear": obj.get("dayOfYear"),
            "dayNumber": obj.get("dayNumber")
        })
        return _obj


